/* Definition section */
%{
    #include "compiler_common.h"
    #include "y.tab.h"	/* header file generated by bison */
    #define YY_NO_UNPUT
    #define YY_NO_INPUT

    extern YYSTYPE yylval;
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
variable {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)

%option yylineno
%x CMT_CON
%x DSTR_CON
%x STR_CON

/* Rules section */
%%

"/*"                { BEGIN(CMT_CON); }
<CMT_CON>(.|\r?\n)  {;}
<CMT_CON>"*/"       { BEGIN(INITIAL); }
"//".*              {;}

\"                  { BEGIN(DSTR_CON); yylval.s_var = ""; }
<DSTR_CON>\"        { BEGIN(INITIAL); return STRING_LIT; }
<DSTR_CON>(\\\"|[^\"])* { yylval.s_var = strdup(yytext); }

'                   { BEGIN(STR_CON); yylval.s_var = ""; }
<STR_CON>'          { BEGIN(INITIAL); return STRING_LIT; }
<STR_CON>(\\'|[^'\n])* { yylval.s_var = strdup(yytext); }

">>"        { return RSHIFT; }
"<<"        { return LSHIFT; }
"&"         { return '&'; }
"|"         { return '|'; }
'~'         { return '~'; }

"+"         { return '+'; }
"-"         { return '-'; }
"*"         { return '*'; }
"/"         { return '/'; }
"%"         { return '%'; }
"!"         { return '!'; }

">"         { return '>'; }
"<"         { return '<'; }
">="        { return GEQ; }
"<="        { return LEQ; }
"=="        { return EQL; }
"!="        { return NEQ; }
"&&"        { return LAND; }
"||"        { return LOR; }

"="         { return ASSIGN; }
"+="        { return ADD_ASSIGN; }
"-="        { return SUB_ASSIGN; }
"*="        { return MUL_ASSIGN; }
"/="        { return DIV_ASSIGN; }
"%="        { return REM_ASSIGN; }

"("         { return '('; }
")"         { return ')'; }
"["         { return '['; }
"]"         { return ']'; }
"{"         { return '{'; }
"}"         { return '}'; }

":"         { return ':'; }
";"         { return ';'; }
","         { return ','; }

"cout"      { return COUT; }

"void"      { yylval.var_type = OBJECT_TYPE_VOID; return VARIABLE_T; }
"char"      { yylval.var_type = OBJECT_TYPE_CHAR; return VARIABLE_T; }
"int"       { yylval.var_type = OBJECT_TYPE_INT; return VARIABLE_T; }
"long"      { yylval.var_type = OBJECT_TYPE_LONG; return VARIABLE_T; }
"float"     { yylval.var_type = OBJECT_TYPE_FLOAT; return VARIABLE_T; }
"double"    { yylval.var_type = OBJECT_TYPE_DOUBLE; return VARIABLE_T; }
"bool"      { yylval.var_type = OBJECT_TYPE_BOOLEAN; return VARIABLE_T; }
"string"    { yylval.var_type = OBJECT_TYPE_STRING; return VARIABLE_T; }

"if"        { return IF; }
"else"      { return ELSE; }
"for"       { return FOR; }
"while"     { return WHILE; }
"return"    { return RETURN; }
"break"     { return BREAK; }

"true"      { yylval.b_var = true; return BOOL_LIT; }
"false"     { yylval.b_var = false; return BOOL_LIT; }
{inumber}   { yylval.i_var = atoi(yytext); return INT_LIT; }
{fnumber}   { yylval.f_var = atof(yytext); return FLOAT_LIT; }
{variable}  { yylval.s_var = strdup(yytext); return VARIABLE; }

<<EOF>>     { 
                static int once = 0;
                if (once++) {
                    yyterminate();
                }
            }
[ \t\r\n]+  {;}


%%
/*  C Code section */
int yywrap(void) {
    return 1;
}